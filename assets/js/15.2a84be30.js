(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{426:function(t,e,n){"use strict";n.r(e);var s=n(20),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("对象")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("对象基础")]),t._v(" "),n("ul",[n("li",[t._v("点表示法: "),n("code",[t._v("person.name")])]),t._v(" "),n("li",[t._v("括号表示法:"),n("code",[t._v("person['name'] person['name'] ['first']")]),t._v("  关联数组，对象做了字符串到值的映射，而数组做的是数字到值的映射。")]),t._v(" "),n("li",[t._v("括号表示法一个有用的地方是它不仅可以动态的去设置对象成员的值，还可以动态的去设置成员的名字。")])])]),t._v(" "),n("li",[n("p",[t._v("this的含义")]),t._v(" "),n("ul",[n("li",[t._v("关键字"),n("code",[t._v("this")]),t._v("指向了当前代码运行时的对象")])])]),t._v(" "),n("li",[n("p",[t._v("对象")]),t._v(" "),n("ul",[n("li",[t._v("当一个对象需要从类中创建出来时，类的构造函数就会运行来创建这个实例，这个过程称之为实例化—实例对象被类实例化")]),t._v(" "),n("li")])]),t._v(" "),n("li",[n("p",[t._v("构建函数和对象")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("JS使用构建函数的特殊函数来定义对象和它们的特征，它提供了创建所需对象(实例)的有效方法，将对象的数据和特征函数按需联结至相应对象。")])]),t._v(" "),n("li",[n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数，在你的眼中，你可以把它当作一个JS版本的类")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("greeting")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hi! i am '")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("定义了对象的属性和方法，，没有明确创建一个对象和返回任何值，使用"),n("code",[t._v("this")]),t._v("关键词，即无论是该对象的哪个实例呗这个构建函数创建，它的"),n("code",[t._v("name")]),t._v("属性就是传递到构建函数形参"),n("code",[t._v("name")]),t._v("的值，它的"),n("code",[t._v("greeting()")]),t._v("方法中也将使用相同的传递到构建函数形参"),n("code",[t._v("name")]),t._v("的值.")])]),t._v(" "),n("li",[n("p",[t._v("构建函数创建新的实例")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("var person1 = new Person('Sam');")])]),t._v(" "),n("li",[n("code",[t._v("var person2 = new Person('Tom');")])]),t._v(" "),n("li",[t._v("控制台打印 "),n("code",[t._v("person1.name person1.greeting()")]),t._v(" "),n("code",[t._v("person2.name person2.greeting()")])]),t._v(" "),n("li",[t._v("可以在页面上看到有两个对象，每一个保存在不同的命名空间里，可以用实例直接来调用方法，两个实例各自独立所以相互功能并不冲突，但是每当我们调用构造函数时，都会重新定义一遍"),n("code",[t._v("greeting()")]),t._v("，为了避免在这样，可以在原型里定义函数。")])])]),t._v(" "),n("li",[n("p",[t._v("创建按对象的其他方式")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Object()构造函数")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("使用Obj()构造函数来创建一个新对象，创建了一个空对象")])]),t._v(" "),n("li",[n("p",[t._v("var person1 = new Obj();  //person1变量中储存了一个新对象，可根据需要，使用点/括号表示法向此对象添加属性和方法")])]),t._v(" "),n("li",[n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("person1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nperson1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'age'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nperson1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("greeting")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])])]),t._v(" "),n("li",[n("p",[t._v("也可以将对象文本传递给Obj()构造函数作为参数，使用属性/方法填充即可")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var person1 = new Obj({\n\tname:'Tom',\n\tage:18,\n\tgreeting:function(){\n\t\talert('Hi~'+this.name);\n\t}\n})\n")])])])])])]),t._v(" "),n("li",[n("p",[t._v("使用create()方法")]),t._v(" "),n("ul",[n("li",[t._v("JS内嵌方法"),n("code",[t._v("create()")]),t._v("方法，允许基于现有对象创建新的对象")]),t._v(" "),n("li",[n("code",[t._v("var person2 = Obj.create(person1)")]),t._v(";   person2.name;  person2.greeting()")]),t._v(" "),n("li",[t._v("person2是基于person1创建的，具有相同的属性和方法，允许创建新的对象而不需要定义构造函数，但浏览器在更晚的时候才支持"),n("code",[t._v("create()方法")])])])])])])])]),t._v(" "),n("li",[n("p",[t._v("对象原型")]),t._v(" "),n("ul",[n("li",[t._v("每一个对象拥有一个原型对象。对象以其原型为模板。从原型继承方法和属性。但原型对象也可能拥有原型，并从中继承方法和属性，以此类推，这个关系叫做原型链，解释了为何一个对象拥有定义在其他对象中的属性和方法。")]),t._v(" "),n("li",[t._v("在传统OOP中，先定义类，再创建对象实例；但在JS中是在对象实例和它的构造器之间建立一个链接(它是"),n("code",[t._v("__proto__")]),t._v("属性，从构造函数的"),n("code",[t._v("prototype")]),t._v("属性派生的)，之后通共上溯原型链在构造器中找到这些方法和属性。")]),t._v(" "),n("li",[t._v("对象的原型可以通过"),n("code",[t._v("Object.getPrototypeOf(obj)")]),t._v("或已被弃用的"),n("code",[t._v("__proto__")]),t._v("属性获得")]),t._v(" "),n("li",[t._v("对象的原型是每个实例上都有的属性，构造函数的"),n("code",[t._v("prototype")]),t._v("属性是构造函数的属性")]),t._v(" "),n("li",[n("code",[t._v("Object.getPrototypeOf(new Foobar())")]),t._v(" 和 "),n("code",[t._v("Foobar.prototype")]),t._v("指向同一个对象。")]),t._v(" "),n("li",[t._v("当我们要访问一个对象的某个属性时，浏览器会先查找这个对象是否具有该属性，若是没有就会在该对象的"),n("code",[t._v("__proto__")]),t._v("中查找该属性，若是有就会被使用；若是没有就会去这个对象的"),n("code",[t._v("__proto__")]),t._v("的"),n("code",[t._v("__proto__")]),t._v("上面去找。默认情况下，所有函数的原型属性的"),n("code",[t._v("__proto__")]),t._v("就是"),n("code",[t._v("window.Object.prototype")]),t._v("，以此类推向上进行查找，如果原型链上的"),n("code",[t._v("__proto__")]),t._v("都没有这个属性，那么这个属性就是undefined.")]),t._v(" "),n("li",[n("code",[t._v("原型链中的方法和属性 没有 被复制到其他的对象——它们被访问时需要通过'原型链'的方式被访问的")])]),t._v(" "),n("li",[n("code",[t._v("没有官方的方法用于直接访问一个对象的原型对象——原型链中的'连接'被定义为在一个内容部属性中")])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("prototype")]),t._v("属性：继承成员被定义的地方")]),t._v(" "),n("ul",[n("li",[t._v("继承的属性和方法是定义在"),n("code",[t._v("prototype")]),t._v("属性上的——那些以"),n("code",[t._v("Object.prototype.")]),t._v("的属性，而非以"),n("code",[t._v("Object.")]),t._v("开头的属性。"),n("code",[t._v("prototype")]),t._v("属性的值是一个对象。")]),t._v(" "),n("li",[n("code",[t._v("Object.prototype.watch()、Object.prototype.valueOf()")]),t._v("等成员，适用于任何继承自Object()的对象类型，包含使用构造器创建新的对象实例。")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);