(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{450:function(n,e,t){"use strict";t.r(e);var l=t(20),a=Object(l.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h4",{attrs:{id:"数组的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的类型"}},[n._v("#")]),n._v(" 数组的类型")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("[类型 +方括号]表示法")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("最简单的方法是使用【类型+方括号】来表示数组：")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("let fibonacci:number[] = [1,1,2,3,5]")]),n._v(";")])])]),n._v(" "),t("li",[t("p",[n._v("数组的项中不允许出现其他的类型：")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("let fibonacci:number[]=[1,'1',2,3,5]")]),n._v(";  //Type 'string' is not assignable to type 'number'.")])])]),n._v(" "),t("li",[t("p",[n._v("数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let fibonacci:number[] = [1,1,2,3,5];\nfibonacci.push('8');\n//push方法只允许传入number类型的参数，但是却传了一个\"8\"类型的参数，所以报错。\n")])])])])])])])]),n._v(" "),t("li",[t("p",[n._v("数组泛型")]),n._v(" "),t("ul",[t("li",[n._v("也可以使用数组泛型，Array"),t("elemType",[n._v("来表示数组：\n"),t("ul",[t("li",[t("code",[n._v("let fabonacci:Array<number> = [1,1,2,3,5];")])])])])],1)])]),n._v(" "),t("li",[t("p",[n._v("用接口表示数组")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("接口也可以用来描述数组：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface NumberArray{\n\t[index:number]:number;\n}\nlet fibonacci:NumberArray = [1,1,2,3,5];\n")])])])]),n._v(" "),t("li",[t("p",[n._v("NumberArray表示：只要索引的类型是数字时，那么值的类型必须是数字。虽然接口也可以用来描述数组，但基本不这么做，只有一种情况例外，就是用它来表示类数组。")])])])])])]),n._v(" "),t("li",[t("p",[n._v("类数组")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("类数组不是数组类型，比如arguments：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function sum(){\n\tlet args:number[] = arguments;\n}\n//arguments实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口：\nfunction sum(){\n\tlet args:{\n\t\t[index:number]:number;\n\t\tlength:number;\n\t\tcallee:Function;\n\t} = arguments;\n}\n//约束了当前索引的类型是数字时，值的类型必须是数字时，也约束了它还有length和callee两个属性。\n\n事实上常用的类数组都有自己的接口定义，比如IArguments,NuodeList,HTMLCollection等：\n\nfunction sum(){\n\tlet args:IArguments = arguments;\n}\n其中IArguments是TS中定义好了的类型，它实际上就是：\ninterface IArguments{\n\t[index:number]:any;\n\tlength:number;\n\tcallee:Function;\n}\n//任意属性定义为number，那么将不会影响其他属性的值类型\n")])])])])])])])]),n._v(" "),t("li",[t("p",[n._v("any在数组中的应用")]),n._v(" "),t("ul",[t("li",[n._v("一个常见的做法就是，用any表示是数组中允许出现任意类型：\n"),t("ul",[t("li",[t("code",[n._v("let list:any[] = ['acatliu',25,{website:'http://xcatliu.com'}]")]),n._v(";")])])])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);