(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{449:function(n,e,t){"use strict";t.r(e);var a=t(20),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h4",{attrs:{id:"对象的类型-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的类型-接口"}},[n._v("#")]),n._v(" 对象的类型——接口")]),n._v(" "),t("p",[n._v("在TS中，使用接口(interfaces)来定义对象的类型")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("例子")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person{\n\tname:string;\n\tage:number;\n}\nlet tom:Person = {\n\tname:'Tom',\n\tage:23\n};\n//定义了接口Person,又定义了变量tom,类型是Person,这样就约束了tom的形状必须和接口Person一致。\n")])])])]),n._v(" "),t("li",[t("p",[n._v("定义的变量比接口少了一些属性是不允许的：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person{\n\tname:string;\n\tage:number;\n}\nlet tom:Person = {\n\tname:'Tom'\n}\n//会报错 Type '{ name: string; }' is not assignable to type 'Person'.\n//   Property 'age' is missing in type '{ name: string; }'.\n")])])])])])]),n._v(" "),t("li",[t("p",[n._v("多一些属性也是不允许的：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person{\n\tname:string;\n\tage:number;\n}\nlet tom:Person = {\n\tname:'tom',\n\tage:23,\n\tgender:'male'\n}\n//会报错 Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.\n//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.\n")])])])])])]),n._v(" "),t("li",[t("p",[n._v("在给变量赋值的时候，变量的形状必须和接口的形状保持一致。")])])])]),n._v(" "),t("li",[t("p",[n._v("可选属性")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("当不需要完全匹配一个形状的时候，就可以使用一个可选属性：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person{\n\tname:string;\n\tage?:number;\n}\nlet tom:Person = {\n\tname:'Tom'\n}\n")])])])]),n._v(" "),t("li",[t("p",[n._v("可选属性的含义是该属性可以不存在，但此时仍然不允许添加未定义的属性。")])])])])])]),n._v(" "),t("li",[t("p",[n._v("任意属性")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("得到一个接口允许有任意的属性，可以使用如下方式：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person{\n\tname:string;\n\tage:23;\n\t[propName:string]:any;\n}\nlet tom:Person = {\n\tname:'Tom',\n\tgender:'male'\n}\n")])])])]),n._v(" "),t("li",[t("p",[n._v("使用【propName:string】定义了任意属性取string类型的值。")])]),n._v(" "),t("li",[t("p",[n._v("值得注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person {\n\tname:string;\n\tage?:number;\n\t[propName:string]:string;\n}\nlet tom:Person = {\n\tname:'Tom',\n\tage:23,\n\tgender:'male'\n}\n如上示例，任意属性的值允许是string,但是可选属性是age的值却是number，number不是stringd的子属性，因此会报错。\n")])])])])])]),n._v(" "),t("li",[t("p",[n._v("一个接口只能定义一个任意属性，若接口中有多个类型的属性，则可以在任意属性中使用联合类型：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person{\n\tname:string;\n\tage?:number;\n\t[propName:string]:string|number;\n}\nlet tom:Person = {\n\tname:'Tom',\n\tage:23,\n\tgender:'male'\n")])])])])])])])])])]),n._v(" "),t("li",[t("p",[n._v("只读属性")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("只希望对象中的一些字段只能在创建的时候被赋值，那么可以用readonly定义只读属性")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person{\n\treadonly id:number;\n\tname:string;\n\tage?:number;\n\t[propName:string]:any;\n}\nlet tom:Person = {\n\tid:89895,\n\tname:'Tom',\n\tgender:'male'\n};\ntom.id = 2580;\n//Cannot assign to 'id' because it is a constant or a read-only property.\n\n使用readonly定义的属性id初始化后，又被赋值了，因此报错。\n")])])])])])]),n._v(" "),t("li",[t("p",[n._v("只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：")]),n._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person{\treadonly id:number;\tname:string;\tage?:number;\t[propName:string]:any;}let tom:Person = {\tname:'Tom',\tgender:'male'}tom.id = 2580;//会报错，一是tom赋值的时候，没有给id进行赋值；二是tom.id是只读属性，不能进行赋值\n")])])])])])])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);